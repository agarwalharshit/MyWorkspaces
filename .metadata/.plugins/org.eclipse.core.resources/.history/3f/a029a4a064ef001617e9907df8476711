package com.zappos.challenge;

public class IslandProblem {
	//No of rows and columns
    static int ROW;
    static int COL;

    boolean isSafe(int M[][], int row, int col,
                   boolean visited[][])
    {

        return (row >= 0) && (row < ROW) &&
               (col >= 0) && (col < COL) &&
               (M[row][col]==1 && !visited[row][col]);
    }
 

    void DFS(int M[][], int row, int col, boolean visited[][])
    {

        int rowNbour[] = new int[] {-1, -1, -1,  0, 0,  1, 1, 1};
        int colNbour[] = new int[] {-1,  0,  1, -1, 1, -1, 0, 1};

        visited[row][col] = true;
 
        for (int k = 0; k < 8; ++k)
            if (isSafe(M, row + rowNbour[k], col + colNbour[k], visited) )
                DFS(M, row + rowNbour[k], col + colNbour[k], visited);
    }
 

    int countIslands(int M[][])
    {
    		ROW=M.length;
    		COL=M[0].length;
    		
        boolean visited[][] = new boolean[ROW][COL];
 

        int count = 0;
        for (int i = 0; i < ROW; ++i)
            for (int j = 0; j < COL; ++j)
                if (M[i][j]==1 && !visited[i][j]) 
                {                                 
                    DFS(M, i, j, visited);
                    ++count;
                }
 
        return count;
    }
 
    // Driver method
    public static void main (String[] args) throws java.lang.Exception
    {
        int M[][]=  new int[][] {{1, 1, 0, 0, 0},
                                 {0, 1, 0, 0, 1},
                                 {1, 0, 0, 1, 1},
                                 {0, 0, 0, 0, 0},
                                 {1, 0, 1, 0, 1}
                                };
        IslandProblem I = new IslandProblem();
        System.out.println("Number of islands is: "+ I.countIslands(M));
    }
}
