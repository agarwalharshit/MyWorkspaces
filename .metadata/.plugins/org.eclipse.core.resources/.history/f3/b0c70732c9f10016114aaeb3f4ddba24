package com.leetcode;

import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

public class ArrayQuestion {
	int[] arr;
	public static void main(String[] args) {
//		ArrayQuestion aq = new ArrayQuestion();
//		aq.repeatedSubstringPattern("abcabcabc");
		String JSON = "{\"LanguageLevels\":{\"1\":\"Pocz\\u0105tkuj\\u0105cy\",\"2\":\"\\u015arednioZaawansowany\",\"3\":\"Zaawansowany\",\"4\":\"Ekspert\"}}\n";
	System.out.println(JSON);
	JSONObject obj = new JSONObject(JSON);
	
	}
	
//	public int[] rotate(int[] arr,int k){
//		int temp=arr[0];
//		int temp2;
//		int j=0;
//		for(int i=0;i<arr.length;i++){
//			j=(j+k)%arr.length;
//			
//			temp2=arr[j];
//			arr[j]=temp;
//			temp=temp2;
//			
//			
//			
//		}
//	}
	
    public boolean repeatedSubstringPattern(String str) {
        int x=0;
      for(int i=1;i<=(str.length()/2);i++){
    	  System.out.println(str.substring(0,x+1));
    	  System.out.println(str.substring(i,i+x+1));
          if(str.substring(0,x+1).equals(str.substring(i,i+x+1))){
              int j=i+x+1;
              while(j<str.length()){
                  if(str.substring(0,x+1).equals(str.substring(j,j+x+1))){
                      j=j+x+1;
                  }else if(j>=str.length()){
                	return true;  
                  }else{
                      x++;
                      break;
                  }
              }
              if(j<str.length()){
                  x++;
              }else{
                  return true;
              }
              
          }else{x++;}
      }
      return false;
    }
	
	
	
	
	
	void quicksort(int[] arr, int start,int end){
		if(start<end){
		int pivotIndex=partition(arr,start,end-1,arr[end]);
		quicksort(arr,start,pivotIndex-1);
		quicksort(arr,pivotIndex+1,end);
		}
	}
	int partition(int[] arr, int start,int end,int pivot){
		int x=start-1; int y=start;
		for(int i=start;i<=end;i++){
			if(arr[i]<=pivot){
				x++;
				int temp=arr[i];
				arr[i]=arr[x];
				arr[x]=temp;
			}
		}
		for(int i=end;i>x;i--){
			arr[i+1]=arr[i];
		}
		arr[x+1]=pivot;
		return x+1;
	}
	
    public int findMin(int[] nums) {
        if(nums[0]<nums[nums.length-1])
        return nums[0];
        return findMin1(nums, 0, nums.length-1);
        
        // for(int i=0;i<nums.length-1;i++){
        //     if(nums[i]>nums[i+1])
        //     return nums[i+1]; 
        // }
        // return nums[0];
    }
    
    public int findMin1(int[] nums, int start, int end) {
        if(end<start){
            return -1;
        }if(start==end){
            return nums[start];
        }
        int mid=(start+end)/2;
        if(nums[start]>nums[mid]){
           return findMin1(nums, start, mid);
        }else{
          return findMin1(nums, mid+1, end);
        }
    }

}
